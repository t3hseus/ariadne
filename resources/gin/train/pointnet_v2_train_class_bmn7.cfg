 # Parameters for Adam:
# ==============================================================================
Adam.lr = 0.0005

# Parameters for BatchBucketSampler:
# ==============================================================================
BatchBucketSampler.batch_size = 2
BatchBucketSampler.drop_last = True
BatchBucketSampler.shuffle = True
BatchBucketSampler.zero_pad_available = True

# Parameters for experiment:
# ==============================================================================
experiment.criterion = @PointNetClassificationLoss
experiment.data_loader = @PointsDataLoader
experiment.epochs = 10
experiment.fp16_training = False
experiment.log_dir = 'lightning_logs/full_run'
experiment.metrics = \
    [@point_net_v2.precision,
     @point_net_v2.recall,
     @point_net_v2.accuracy,
     @point_net_v2.f1_score]
experiment.model = @PointNet
experiment.optimizer = @Adam
experiment.random_seed = 42

# Parameters for PointNet:
# ==============================================================================
PointNet.top_layers = (256, 128)
PointNet.transform = @Transform()

# Parameters for PointNetClassificationLoss:
# ==============================================================================
PointNetClassificationLoss.alpha = 0.0001
PointNetClassificationLoss.fake_weight = 1
PointNetClassificationLoss.real_weight = 2

# Parameters for PointsDataLoader:
# ==============================================================================
PointsDataLoader.collate_fn = @points_collate_fn
PointsDataLoader.dataset = @PointsDatasetMemory
PointsDataLoader.drop_last = True
PointsDataLoader.n_train = 20
PointsDataLoader.n_valid = 20

# Parameters for PointsDatasetMemory:
# ==============================================================================
PointsDatasetMemory.input_dir = 'output/bmn7_points_class_full_1'
PointsDatasetMemory.pin_mem = True

# Parameters for feature_transform/TNet:
# ==============================================================================
feature_transform/TNet.conv_layers = (16, 32)
feature_transform/TNet.k = 16
feature_transform/TNet.linear_layers = (32, 64)
feature_transform/TNet.pooling = 'max'

# Parameters for input_transform/TNet:
# ==============================================================================
input_transform/TNet.conv_layers = (8, 16)
input_transform/TNet.k = 3
input_transform/TNet.linear_layers = None
input_transform/TNet.pooling = 'max'

# Parameters for Transform:
# ==============================================================================
Transform.add_top_relu = False
Transform.feature_transform = @feature_transform/TNet()
Transform.input_features_dim = 3
Transform.input_transform = @input_transform/TNet()
Transform.pooling = 'max'
Transform.top_layers = (32, 64)